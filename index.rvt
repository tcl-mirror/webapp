<?

namespace eval cache {}
namespace eval ::tclwebappframework {}

if {[catch {
	# Clean up from previous run, if needed
	unset -nocomplain args
	unset -nocomplain module

	# Set defaults for every request
	set displayheaders 1

	# If this interpreter (not request) has not already been globally initialized, initialize it now
	## Update the global auto_path if not already done
	if {![info exists ::tclwebappframework::auto_path_set]} {
		set ::tclwebappframework::auto_path_set 1
		lappend ::auto_path local/packages packages
	}

	## Load the database configuration if not already done
	if {![info exists ::tclwebappframework::done_onlyonce_dbconfig]} {
		foreach file [list modules/load/onlyonce/dbconfig.tcl local/modules/load/onlyonce/dbconfig.tcl] {
			if {[file exists $file]} {
				namespace eval :: [list source $file]
			}
		}

		set ::tclwebappframework::done_onlyonce_dbconfig 1
	}

	## Load scripts that get loaded for every interpreter
	if {![info exists ::tclwebappframework::done_onlyonce]} {
		package require module
		package require wa_debug
		package require web
		package require user
		package require tclwebappframework

		wa_debug::logfile -

		foreach file [concat \
		    [lsort -dictionary [glob -nocomplain local/modules/*/preload/*.tcl]] \
		    [lsort -dictionary [glob -nocomplain modules/*/load/*.tcl]] \
		    [lsort -dictionary [glob -nocomplain modules/load/onlyonce/*.tcl]] \
		    [lsort -dictionary [glob -nocomplain local/modules/*/load/*.tcl]] \
		    [lsort -dictionary [glob -nocomplain local/modules/load/onlyonce/*.tcl]] \
		] {
			wa_debug::log index.rvt "(per-interp) source $file"

			namespace eval :: [list source $file]
		}

		set ::tclwebappframework::done_onlyonce 1
	}

	# Load this requests environment
	load_response args
	load_headers
	load_env

	# If a module was specified in the request, use it ...
	if {[info exists args(module)]} {
		set module $args(module)
	} else {
		#a... otherwise use the "defaultmodule" global variable. 
		if {[info exists ::tclwebappframework::defaultmodule]} {
			set module $::tclwebappframework::defaultmodule
		} else {
			## ... failing that use the module named "main"
			set module "main"
		}
	}

	# Load scripts that get run with every request
	foreach file [concat \
	    [lsort -dictionary [glob -nocomplain local/modules/preload/*.tcl]] \
	    [lsort -dictionary [glob -nocomplain local/modules/*/preload/everyrequest/*.tcl]] \
	    [lsort -dictionary [glob -nocomplain modules/load/*.tcl]] \
	    [lsort -dictionary [glob -nocomplain local/modules/load/*.tcl]] \
	    [lsort -dictionary [glob -nocomplain local/modules/*/load/everyrequest/*.tcl]] \
	] {
		wa_debug::log index.rvt "(per-request) source $file"

		source $file
	}

	# If we are not someone (anonymous is someone...) make the user authenticate using the "login" module
	if {[user::getuid] == 0} {
		if {$module != "login"} {
			set req_module $module
		}

		set module "login"
	}

	# Determine and call initialization modules specified by the "initmods" global variable
	# for this request
	## This variable may contain a sorting prefix in the form of <prefix>:<module>
	## This prefix is ignored, but used for sorting.
	## The action called for the module is called "start" (for initialization) and "stop" for
	## deinitialization of this request
	##
	## These module actions (start/stop) should return a page to display as a header/footer
	set initmods [::tclwebappframework::get_initmods]
	set finimods [::tclwebappframework::get_finimods]
	if {![info exists ::tclwebappframework::done_initmods]} {
		set ::tclwebappframework::done_initmods 1
		set ::tclwebappframework::headers [list]
		set ::tclwebappframework::footers [list]

		foreach initmod $initmods {
			set modpage [module::call $initmod start]
			if {$modpage == ""} {
				continue
			}
			lappend ::tclwebappframework::headers $initmod $modpage
		}

		foreach finimod $finimods {
			set modpage [module::call $finimod stop]
			if {$modpage == ""} {
				continue
			}
			lappend ::tclwebappframework::footers $finimod $modpage
		}
	}

	# Convert image arguments into simple lists
	foreach var [array names args] {
		if {[string match "*.y" $var]} {
			continue
		}
		if {[string match "*.x" $var]} {
			set basevar [string range $var 0 end-2]
			if {![info exists args($basevar.y)]} {
				continue
			}
			set args($basevar) [list $args($basevar.x) $args($basevar.y)]
			unset args($basevar.x) args($basevar.y)
		}
	}

	# Determine subaction
	set subaction ""
	foreach var [array names args] {
		if {[string match "subaction_*" $var]} {
			set subaction [string tolower [join [lrange [split $var _] 1 end] _]]
			break
		}
		if {[string tolower $var] == "subaction"} {
			set subaction [join [split [string tolower $args($var)]] _]
			break
		}
	}

	# Determine action method to call for this module, and invoke the module
	## It should return a page name to display to the user
	if {[info exists args(action)]} {
		set action $args(action)
	} else {
		set action ""
	}

	# Call the "pre-request" action for every initialization module, if it exists
	foreach initmod $initmods {
		module::call $initmod pre-request
	}

	# Call the module action (unless the login module is requested, then
	# always call the default action)
	if {$module != "login"} {
		wa_debug::log index.rvt [list module::call $module $action $subaction]

		set newpage [module::call $module $action $subaction]
	} else {
		wa_debug::log index.rvt "Calling [list module::call "login" "" ""] because module has been set to \"login\""

		set newpage [module::call login "" ""]
	}

	# Call the "post-request" action for every initialization module, if it exists
	foreach initmod $initmods {
		module::call $initmod post-request
	}

	# Assume a blank return value means
	# that the user is required to authenticate?
	if {$newpage == ""} {
		if {$module != "login"} {
			wa_debug::log index.rvt "Calling [list module::call "login" "" ""] because $module::$action($subaction) returned a blank page."

			set module "login"

			set newpage [module::call login "" ""]
		}
	}

	# --------------------------------------
	# Begin producing output
	# --------------------------------------

	# Up until this point, no output has been produced
	# Display the collection of fragments that have been built up from the
	# previous steps

	# Display headers
	## Do not display headers if headers are not requested
	if {[info exists args(_webapp_noheader)]} {
		set displayheaders 0
	}

	if {$displayheaders} {
		# Display the header output as determined earlier for this interpreter
		foreach {headmod header} $::tclwebappframework::headers {
			wa_debug::log index.rvt "Displaying $header/$headmod"
			display $header $headmod
		}
	}

	# Display the actual page
	display $newpage $module

	if {$displayheaders} {
		# Display the header output as determined earlier for this interpreter
		foreach {footmod footer} $::tclwebappframework::footers {
			wa_debug::log index.rvt "Displaying $footer/$footmod"
			display $footer $footmod
		}
	}

	# Load scripts that get run at the end of every request
	foreach file [concat \
	    [lsort -dictionary [glob -nocomplain modules/unload/*.tcl]] \
	    [lsort -dictionary [glob -nocomplain local/modules/unload/*.tcl]] \
	] {
		source $file
	}
} errmsg]} {
	set savedtrace $::errorInfo

	set failed 1
} else {
	set failed 0
}

catch {
	namespace delete cache
}

catch {
	update idletasks
}

if {$failed} {
	# Throw the error again if there's an error handler
	if {[namespace which ::tclwebappframework::app_error] != ""} {
		::tclwebappframework::app_error $errmsg $savedtrace
	} elseif {[namespace which -command rivet_error] != ""} {
		error $errmsg $savedtrace
	} else {
		# Otherwise, handle it ourselves.
		puts "<HTML>"
		puts "  <HEAD><TITLE>ERROR</TITLE></HEAD>"
		puts "  <BODY>"
		puts "    <PRE>"
		puts "ERROR:"
		puts "$errmsg"
		puts "    </PRE>"
		puts "  </BODY>"
		puts "</HTML>"
	}
}

?>
